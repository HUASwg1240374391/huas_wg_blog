call： 
Function.prototype._call = function(context) {
    var context = context || window
    var result
    let args = []
    let arg_len = arguments.length
    for (let i = 1; i < arg_len; i++) {
      args.push('arguments[' + i + ']')
    }
    context.fn = this
    result = eval('context.fn(' + args + ')')
    delete context.fn
    return result
  }


apply：
Function.prototype._apply = function(context, arr) {
  var context = Object(context) || window
  context.fn = this

  var result
  if (!arr) {
    result = context.fn()
  } else {
    var args = []
    for (var i = 0, len = arr.length; i < len; i++) {
      args.push('arr[' + i + ']')
    }
    result = eval('context.fn(' + args + ')')
  }

  delete context.fn
  return result
}

Bind：
Function.prototype.bind2 = function(context) {
  var self = this
  var args = Array.prototype.slice.call(arguments, 1)
  var fNOP = function() {}
  var fBound = function() {
    var bindArgs = Array.prototype.slice.call(arguments)
    //作为构造函数使用，this指向fNOP则不改变this本身,作为普通函数调用时，//this指向window，将其修改为context
    return self.apply(
      this instanceof fNOP ? this : context,
      args.concat(bindArgs)
    )
  }
  fNOP.prototype = this.prototype
  fBound.prototype = new fNOP()
  return fBound
}
