mobile:
device orientation(陀螺仪)
    通过绑定事件来获取设备的物理朝向
    可以获取到三个数值 分别是:
        alpha:Z轴方向
        beta:X轴方向
        gamma:Y轴方向
        CASE:
            window.addEventListener('deviceorientation',e => {
                console.log('Gamma:',e.gamma);
                console.log('Beta:',e.beta);
                console.log('Alpha:',e.Alpha);
            })

page lifecycle(网页生命周期)
    我们可以用document.visibitilityState来监听网页可见度，是否卸载但是在手机和
    电脑上都会现这种情况，就是比如说页面打开过了很久没有打开，这时你看在浏览器的
    tab页中看着是可以看到内容的，但是点进去却需要加载。chrome68添加了 freeze和 resume事件，
    来完善的描述一个网页从加载到卸载，包括浏览器停止后台进程，释放资源各种生命阶段。
    从一个生命周期阶段到另外一个生命周期阶段会触发不同的事件，
    比如onfocus，onblur，onvisibilitychange，onfreeze等等，
    通过这些事件我们可以响应网页状态的转换。
    CASE:
    window.addEventListener('blur',() => {})
    window.addEventListener('visibilitychange',() => {
        // 通过这个方法来获取当前标签页在浏览器中的激活状态。
        switch(document.visibilityState){
            case'prerender': // 网页预渲染 但内容不可见
            case'hidden':    // 内容不可见 处于后台状态，最小化，或者锁屏状态
            case'visible':   // 内容可见
            case'unloaded':  // 文档被卸载
        }
    });

CustomEvent （自定义事件）
    大家都知道各种事件是如何绑定的，但是有时候这些事件不够用呢，
    custom event就可以解决这样的问题。
    CASE:
    let dom = document.querySelector('#app');
    // 绑定事件， 传递过来的值可以通过ev.detail 来获取
    dom.addEventListener('log-in',(ev) => {
        const { detail } = ev;
        console.log(detail);  // hello
    })
    // 派发事件，需要传入两个参数，一个是事件类型，另外一个是一个对象，detail就是传递过去的值
    dom.dispatchEvent(new CustomEvent('log-in',{
        detail:'hello'
    }))
    还有很多有意思而且很重要的API，比如：web components， service worker，genric sensor等等



