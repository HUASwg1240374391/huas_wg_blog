在node中事件每一轮循环按照顺序分为6个阶段，来自libuv的实现：
    1.timers：执行满足条件的setTimeout、setInterval回调。
    2.I/O callbacks：是否有已完成的I/O操作的回调函数，来自上一轮的poll残留。
    3.idle，prepare：可忽略
    4.poll：等待还没完成的I/O事件，会因timers和超时时间等结束等待。
    5.check：执行setImmediate的回调。
    6.close callbacks：关闭所有的closing handles，一些onclose事件

    队列类型
        除上述循环阶段中的任务类型，我们还剩下浏览器和node共有的microtask和node独有的process.nextTick，我们称之为Microtask Queue和NextTick Queue。
        我们把循环中的几个阶段的执行队列也分别称为Timers Queue、I/O Queue、Check Queue、Close Queue。

    循环之前
        在进入第一次循环之前，会先进行如下操作：
        同步任务
        发出异步请求
        规划定时器生效的时间
        执行process.nextTick()

    开始循环
        清空当前循环内的Timers Queue，清空NextTick Queue，清空Microtask Queue。
        清空当前循环内的I/O Queue，清空NextTick Queue，清空Microtask Queue。
        清空当前循环内的Check Queu，清空NextTick Queue，清空Microtask Queue。
        清空当前循环内的Close Queu，清空NextTick Queue，清空Microtask Queue。
        进入下轮循环。
        可以看出，nextTick优先级比promise等microtask高。setTimeout和setInterval优先级比setImmediate高。