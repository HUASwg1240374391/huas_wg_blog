ARQ:超时重传协议，通过确认和超时机制保证数据的正确送达，ARQ包括连续ARQ和停止等待ARQ
    RTT：请求发送到接收到响应的前几个字节所需要的时间
    MSS：是tcp一次能够传输数据的最大值（不包括协议头的开销）即最大报文段长度
    MTU:一种通信协议的某一层上面所能通过的最大数据包大小（以字节为单位）。 最大传输单元这个参数通常与通信接口有关
    停止等待ARQ:
        正常传输过程:
            只要A向B发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在定时器时间内接收到对端应答就取消定时器并发送下一段报文。
        报文丢失或出错：
            出现丢包未收到响应则等待定时器过期重新发送数据包，所以需要提前备份，即使报文正常传输，也可能出现传输过程中报文出错的情况，这时候对端会放弃该报文并等待重传
            （定时器时间一般会大于一个RTT的平均时间）
        ACK超时或丢失:
            确认应答也会出现丢失的情况，这时候发送端会启动重传，接收端接收到后会丢弃旧报文并发送确认应答，在超时的情况下也会出现确认应答报文迟到的情况
        缺点：传输效率低，在网络环境良好的情况下每次发送报文都得等待对端的ACK
    连续ARQ:
        连续ARQ :拥有发送，在没有收到应答的情况下可以连续发送窗口内的数据报文，相比停等效率提高
        累计确认:接收端会连续不断接收报文，通过累计确认，在接受了很多个报文后统一确认（回复一个应答符号n，表示该符号之前的数据全都接收到，下次发送n+1序号的数据）
        弊端：中间报文缺失，5到6未到7到
    滑动窗口:
        两端分别维护的发送窗口和接收窗口，
        发送端窗口包含已发送未收到应答报文的数据和可以发送但是未发送的数据，发送端窗口有接收端窗口决定，接收方会将当前接收窗口剩余大小写入应答报文，发送窗口动态调整
        发送窗口接收到应答报文之后滑动窗口以实现流量控制
    zero窗口：
        发送过程中，可能出现对端窗口0剩余的情况，该情况下发送窗口停止发送，并启动定时器定时发送请求获取窗口大小，重试一定次数后可能会中断TCP连接
    拥塞处理:
            慢开始：将发送窗口逐渐增大,设置初始拥塞窗口为1MSS,每过一个RTT时间,将窗口大小*2，大小不能没有限制，有一个阀值，大于该值时自动启用拥塞避免算法
            拥塞避免:启用拥塞避免后每个RTT时间窗口值+1；传输过程中超时则将阀值设置为当前窗口大小的一半，将拥塞窗口设置为1MSS，启用拥塞避免
            快重传，快恢复:快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下.
                    如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种:
                        TCP Taho 实现如下
                            将阈值设为当前拥塞窗口的一半
                            将拥塞窗口设为 1 MSS
                            重新开始慢开始算法
                        TCP Reno 实现如下
                            拥塞窗口减半
                            将阈值设为当前拥塞窗口
                            进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）
                            使用拥塞避免算法
        
        
        
                           